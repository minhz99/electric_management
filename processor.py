# processor.py
"""
Module x·ª≠ l√Ω d·ªØ li·ªáu MQTT t·ª´ ESP8266 PZEM004T v√† g·ª≠i v√†o InfluxDB
T√≠nh to√°n ƒëi·ªán ti√™u th·ª• h√†ng ng√†y/th√°ng v√† d·ª± ƒëo√°n
"""

import json
import logging
from datetime import datetime, timedelta
import schedule
import time
from typing import Dict

from config import init_influx, write_influx, init_mqtt, INFLUX_BUCKET, INFLUX_ORG, DAILY_RESET_TIME, MONTH_START_DAY, TIMEZONE_GMT7
from pricing import calc_electricity_cost

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class ElectricityProcessor:
    def __init__(self):
        """Kh·ªüi t·∫°o processor v·ªõi k·∫øt n·ªëi InfluxDB v√† MQTT"""
        self.influx_client = init_influx()
        logger.info("ƒê√£ k·∫øt n·ªëi InfluxDB th√†nh c√¥ng")
        
        self.last_energy_reading = None
        self.monthly_start_energy = None
        self.daily_start_energy = None
        
        # Health monitoring
        self.last_data_time = None
        self.mqtt_connected = False
        self.influx_healthy = True
        
        # Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu
        self._initialize_energy_baseline()
        
        # Schedule job l√∫c DAILY_RESET_TIME m·ªói ng√†y. Trong job s·∫Ω reset daily
        # v√† n·∫øu l√† ng√†y ƒë·∫ßu th√°ng th√¨ reset monthly.
        schedule.every().day.at(DAILY_RESET_TIME).do(self._midnight_job)
        
        logger.info("ƒê√£ kh·ªüi t·∫°o ElectricityProcessor")
    
    def _initialize_energy_baseline(self):
        """Kh·ªüi t·∫°o baseline energy cho th√°ng/ng√†y hi·ªán t·∫°i t·ª´ InfluxDB"""
        try:
            query_api = self.influx_client.query_api()
            
            # 1. L·∫•y gi√° tr·ªã energy g·∫ßn nh·∫•t
            self.last_energy_reading = self._get_latest_energy_from_db(query_api)
            
            # 2. L·∫•y baseline ƒë·∫ßu th√°ng (ng√†y MONTH_START_DAY l√∫c 00:00)
            self.monthly_start_energy = self._get_month_start_energy_from_db(query_api)
            
            # 3. L·∫•y baseline ƒë·∫ßu ng√†y h√¥m nay (00:00)
            self.daily_start_energy = self._get_daily_start_energy_from_db(query_api)
            
            # Ki·ªÉm tra v√† √°p d·ª•ng fallback logic n·∫øu c·∫ßn
            self._apply_fallback_logic()
            
            logger.info(f"Kh√¥i ph·ª•c baseline th√†nh c√¥ng:")
            logger.info(f"  - Energy hi·ªán t·∫°i: {self.last_energy_reading} kWh")
            logger.info(f"  - Baseline ƒë·∫ßu th√°ng: {self.monthly_start_energy} kWh")
            logger.info(f"  - Baseline ƒë·∫ßu ng√†y: {self.daily_start_energy} kWh")
            
            # T√≠nh to√°n v√† hi·ªÉn th·ªã ƒëi·ªán ti√™u th·ª• hi·ªán t·∫°i
            daily_consumption = max(0, self.last_energy_reading - self.daily_start_energy)
            monthly_consumption = max(0, self.last_energy_reading - self.monthly_start_energy)
            logger.info(f"  - ƒêi·ªán ti√™u th·ª• h√¥m nay: {daily_consumption:.3f} kWh")
            logger.info(f"  - ƒêi·ªán ti√™u th·ª• th√°ng n√†y: {monthly_consumption:.3f} kWh")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o energy baseline: {e}")
            self.last_energy_reading = 0
            self.monthly_start_energy = 0
            self.daily_start_energy = 0
    
    def _get_latest_energy_from_db(self, query_api):
        """L·∫•y gi√° tr·ªã energy g·∫ßn nh·∫•t t·ª´ InfluxDB"""
        try:
            flux = f"""
from(bucket: "{INFLUX_BUCKET}")
  |> range(start: -30d)
  |> filter(fn: (r) => r["_measurement"] == "data")
  |> filter(fn: (r) => r["_field"] == "energy")
  |> last()
"""
            tables = query_api.query(flux, org=INFLUX_ORG)
            for table in tables:
                for record in table.records:
                    return float(record.get_value())
            return 0
        except Exception as e:
            logger.error(f"L·ªói l·∫•y energy g·∫ßn nh·∫•t: {e}")
            return 0
    
    def _get_month_start_energy_from_db(self, query_api):
        """L·∫•y gi√° tr·ªã energy t·∫°i ƒë·∫ßu th√°ng t·ª´ InfluxDB"""
        try:
            now = datetime.now(TIMEZONE_GMT7)
            # T√≠nh ng√†y ƒë·∫ßu th√°ng
            month_start = now.replace(day=MONTH_START_DAY, hour=0, minute=0, second=0, microsecond=0)
            
            # N·∫øu h√¥m nay l√† ng√†y ƒë·∫ßu th√°ng, l·∫•y th√°ng tr∆∞·ªõc
            if now.day < MONTH_START_DAY:
                if month_start.month == 1:
                    month_start = month_start.replace(year=month_start.year-1, month=12)
                else:
                    month_start = month_start.replace(month=month_start.month-1)
            
            # Query energy g·∫ßn nh·∫•t t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫ßu th√°ng
            flux = f"""
from(bucket: "{INFLUX_BUCKET}")
  |> range(start: {month_start.strftime('%Y-%m-%dT%H:%M:%SZ')}, stop: {(month_start + timedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%SZ')})
  |> filter(fn: (r) => r["_measurement"] == "data")
  |> filter(fn: (r) => r["_field"] == "energy")
  |> first()
"""
            tables = query_api.query(flux, org=INFLUX_ORG)
            for table in tables:
                for record in table.records:
                    return float(record.get_value())
            
            # N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·∫°i ƒë·∫ßu th√°ng, l·∫•y energy g·∫ßn nh·∫•t tr∆∞·ªõc ƒë√≥
            flux_fallback = f"""
from(bucket: "{INFLUX_BUCKET}")
  |> range(start: -60d, stop: {month_start.strftime('%Y-%m-%dT%H:%M:%SZ')})
  |> filter(fn: (r) => r["_measurement"] == "data")
  |> filter(fn: (r) => r["_field"] == "energy")
  |> last()
"""
            tables = query_api.query(flux_fallback, org=INFLUX_ORG)
            for table in tables:
                for record in table.records:
                    return float(record.get_value())
            return 0
        except Exception as e:
            logger.error(f"L·ªói l·∫•y energy ƒë·∫ßu th√°ng: {e}")
            return 0
    
    def _get_daily_start_energy_from_db(self, query_api):
        """L·∫•y gi√° tr·ªã energy t·∫°i ƒë·∫ßu ng√†y h√¥m nay t·ª´ InfluxDB"""
        try:
            now = datetime.now(TIMEZONE_GMT7)
            today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            
            # Query energy g·∫ßn nh·∫•t t·∫°i 00:00 h√¥m nay
            flux = f"""
from(bucket: "{INFLUX_BUCKET}")
  |> range(start: {today_start.strftime('%Y-%m-%dT%H:%M:%SZ')}, stop: {(today_start + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%M:%SZ')})
  |> filter(fn: (r) => r["_measurement"] == "data")
  |> filter(fn: (r) => r["_field"] == "energy")
  |> first()
"""
            tables = query_api.query(flux, org=INFLUX_ORG)
            for table in tables:
                for record in table.records:
                    return float(record.get_value())
            
            # N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·∫°i 00:00, l·∫•y energy g·∫ßn nh·∫•t tr∆∞·ªõc ƒë√≥
            flux_fallback = f"""
from(bucket: "{INFLUX_BUCKET}")
  |> range(start: -7d, stop: {today_start.strftime('%Y-%m-%dT%H:%M:%SZ')})
  |> filter(fn: (r) => r["_measurement"] == "data")
  |> filter(fn: (r) => r["_field"] == "energy")
  |> last()
"""
            tables = query_api.query(flux_fallback, org=INFLUX_ORG)
            for table in tables:
                for record in table.records:
                    return float(record.get_value())
            return 0
        except Exception as e:
            logger.error(f"L·ªói l·∫•y energy ƒë·∫ßu ng√†y: {e}")
            return 0
    
    def _apply_fallback_logic(self):
        """√Åp d·ª•ng logic fallback khi kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu baseline"""
        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu energy g·∫ßn nh·∫•t, kh√¥ng th·ªÉ l√†m g√¨
        if self.last_energy_reading == 0:
            logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu energy, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh 0")
            return
        
        # N·∫øu kh√¥ng t√¨m th·∫•y baseline ƒë·∫ßu th√°ng, s·ª≠ d·ª•ng energy hi·ªán t·∫°i
        if self.monthly_start_energy == 0:
            self.monthly_start_energy = self.last_energy_reading
            logger.warning(f"Kh√¥ng t√¨m th·∫•y baseline ƒë·∫ßu th√°ng, s·ª≠ d·ª•ng energy hi·ªán t·∫°i: {self.monthly_start_energy} kWh")
        
        # N·∫øu kh√¥ng t√¨m th·∫•y baseline ƒë·∫ßu ng√†y, s·ª≠ d·ª•ng energy hi·ªán t·∫°i
        if self.daily_start_energy == 0:
            self.daily_start_energy = self.last_energy_reading
            logger.warning(f"Kh√¥ng t√¨m th·∫•y baseline ƒë·∫ßu ng√†y, s·ª≠ d·ª•ng energy hi·ªán t·∫°i: {self.daily_start_energy} kWh")
        
        # Ki·ªÉm tra t√≠nh h·ª£p l√Ω: baseline kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n energy hi·ªán t·∫°i
        if self.monthly_start_energy > self.last_energy_reading:
            logger.warning(f"Baseline ƒë·∫ßu th√°ng ({self.monthly_start_energy}) > energy hi·ªán t·∫°i ({self.last_energy_reading}), ƒëi·ªÅu ch·ªânh v·ªÅ {self.last_energy_reading}")
            self.monthly_start_energy = self.last_energy_reading
        
        if self.daily_start_energy > self.last_energy_reading:
            logger.warning(f"Baseline ƒë·∫ßu ng√†y ({self.daily_start_energy}) > energy hi·ªán t·∫°i ({self.last_energy_reading}), ƒëi·ªÅu ch·ªânh v·ªÅ {self.last_energy_reading}")
            self.daily_start_energy = self.last_energy_reading
    
    def _detect_pzem_reset(self, new_energy):
        """Ph√°t hi·ªán PZEM004T b·ªã reset counter"""
        if self.last_energy_reading is None:
            return  # L·∫ßn ƒë·∫ßu ti√™n nh·∫≠n d·ªØ li·ªáu
        
        # Ph√°t hi·ªán energy gi·∫£m ƒë·ªôt ng·ªôt (c√≥ th·ªÉ do PZEM reset)
        if new_energy < self.last_energy_reading * 0.5:
            logger.critical("üö® PZEM RESET DETECTED!")
            logger.critical(f"   Energy gi·∫£m t·ª´ {self.last_energy_reading} kWh xu·ªëng {new_energy} kWh")
            logger.critical(f"   ƒêi·ªÅu n√†y c√≥ th·ªÉ do:")
            logger.critical(f"   - PZEM004T b·ªã reset/m·∫•t ƒëi·ªán")
            logger.critical(f"   - ESP8266 reboot")
            logger.critical(f"   - L·ªói sensor ho·∫∑c nhi·ªÖu ƒëi·ªán t·ª´")
            logger.critical(f"   ‚ö†Ô∏è  C·∫¢NH B√ÅO: D·ªØ li·ªáu ti√™u th·ª• ƒëi·ªán s·∫Ω b·ªã sai!")
            logger.critical(f"   üí° KHUY·∫æN NGH·ªä: Reset baseline th·ªß c√¥ng ho·∫∑c ki·ªÉm tra ph·∫ßn c·ª©ng")
            
            # C√≥ th·ªÉ th√™m logic g·ª≠i email/webhook alert ·ªü ƒë√¢y
            self._trigger_pzem_reset_alert(self.last_energy_reading, new_energy)
    
    def _trigger_pzem_reset_alert(self, old_energy, new_energy):
        """K√≠ch ho·∫°t c·∫£nh b√°o khi ph√°t hi·ªán PZEM reset"""
        try:
            # Ghi v√†o InfluxDB ƒë·ªÉ tracking
            alert_data = {
                "alert_type": "pzem_reset",
                "old_energy": old_energy,
                "new_energy": new_energy,
                "energy_drop_ratio": new_energy / old_energy if old_energy > 0 else 0,
                "severity": "critical"
            }
            
            write_influx(
                self.influx_client,
                "alerts",
                alert_data,
                {"alert_type": "pzem_reset"}
            )
            
            logger.info("ƒê√£ ghi alert v√†o InfluxDB measurement 'alerts'")
            
            # TODO: Th√™m logic g·ª≠i email/webhook/Telegram notification
            # self._send_notification(alert_data)
            
        except Exception as e:
            logger.error(f"L·ªói khi ghi alert: {e}")
    
    def _validate_sensor_data(self, voltage, current, power, energy, frequency, pf):
        """Validate d·ªØ li·ªáu t·ª´ sensor PZEM004T"""
        
        # Ki·ªÉm tra gi√° tr·ªã √¢m (kh√¥ng h·ª£p l·ªá cho ƒëi·ªán nƒÉng)
        if energy < 0:
            logger.warning(f"Energy √¢m: {energy} kWh - kh√¥ng h·ª£p l·ªá")
            return False
        
        # Ki·ªÉm tra voltage trong kho·∫£ng h·ª£p l√Ω (180V - 250V cho ƒëi·ªán d√¢n d·ª•ng VN)
        if voltage < 0 or voltage > 300:
            logger.warning(f"Voltage b·∫•t th∆∞·ªùng: {voltage}V")
            if voltage < 0:
                return False  # Voltage √¢m l√† kh√¥ng th·ªÉ
        
        # Ki·ªÉm tra current √¢m
        if current < 0:
            logger.warning(f"Current √¢m: {current}A - kh√¥ng h·ª£p l·ªá")
            return False
        
        # Ki·ªÉm tra power √¢m (c√≥ th·ªÉ √¢m khi c√≥ nƒÉng l∆∞·ª£ng ng∆∞·ª£c, nh∆∞ng c·∫£nh b√°o)
        if power < 0:
            logger.warning(f"Power √¢m: {power}W - c√≥ th·ªÉ do nƒÉng l∆∞·ª£ng ng∆∞·ª£c")
        
        # Ki·ªÉm tra power spike b·∫•t th∆∞·ªùng (> 10kW)
        if power > 10000:
            logger.warning(f"Power spike cao: {power}W - ki·ªÉm tra thi·∫øt b·ªã")
        
        # Ki·ªÉm tra frequency (49-51 Hz cho l∆∞·ªõi ƒëi·ªán VN)
        if frequency > 0 and (frequency < 45 or frequency > 55):
            logger.warning(f"Frequency b·∫•t th∆∞·ªùng: {frequency}Hz")
        
        # Ki·ªÉm tra power factor (0-1)
        if pf < 0 or pf > 1:
            logger.warning(f"Power factor kh√¥ng h·ª£p l·ªá: {pf}")
            return False
        
        # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n: P = V √ó I √ó PF (cho AC)
        if voltage > 0 and current > 0 and pf > 0:
            calculated_power = voltage * current * pf
            power_diff_ratio = abs(power - calculated_power) / max(power, calculated_power, 1)
            
            if power_diff_ratio > 0.2:  # Ch√™nh l·ªách > 20%
                logger.warning(f"D·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n: P={power}W, V√óI√óPF={calculated_power:.1f}W (ch√™nh {power_diff_ratio*100:.1f}%)")
        
        # Ki·ªÉm tra energy tƒÉng qu√° nhanh (> 1kWh trong 1 message)
        if self.last_energy_reading is not None:
            energy_increase = energy - self.last_energy_reading
            if energy_increase > 1:  # TƒÉng > 1kWh trong 1 message (5s)
                logger.warning(f"Energy tƒÉng qu√° nhanh: +{energy_increase:.3f} kWh trong 1 message")
                logger.warning("C√≥ th·ªÉ do l·ªói sensor ho·∫∑c nhi·ªÖu ƒëi·ªán t·ª´")
        
        return True  # D·ªØ li·ªáu h·ª£p l·ªá
    
    def _health_check(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng"""
        issues = []
        
        # Ki·ªÉm tra d·ªØ li·ªáu g·∫ßn nh·∫•t
        if self.last_data_time is not None:
            time_since_last_data = (datetime.now(TIMEZONE_GMT7) - self.last_data_time).total_seconds()
            if time_since_last_data > 300:  # 5 ph√∫t kh√¥ng c√≥ d·ªØ li·ªáu
                issues.append(f"Kh√¥ng nh·∫≠n d·ªØ li·ªáu trong {time_since_last_data/60:.1f} ph√∫t")
        
        # Ki·ªÉm tra InfluxDB
        try:
            self.influx_client.ping()
            self.influx_healthy = True
        except:
            self.influx_healthy = False
            issues.append("InfluxDB kh√¥ng kh·∫£ d·ª•ng")
        
        # Ki·ªÉm tra baseline h·ª£p l√Ω
        if self.last_energy_reading is not None:
            if self.daily_start_energy and self.daily_start_energy > self.last_energy_reading:
                issues.append("Daily baseline > current energy")
            if self.monthly_start_energy and self.monthly_start_energy > self.last_energy_reading:
                issues.append("Monthly baseline > current energy")
        
        # Log health status
        if issues:
            logger.warning(f"üè• Health Check Issues: {', '.join(issues)}")
            
            # Ghi health alert v√†o InfluxDB (n·∫øu c√≥ th·ªÉ)
            if self.influx_healthy:
                try:
                    health_data = {
                        "issues_count": len(issues),
                        "last_data_age_seconds": time_since_last_data if self.last_data_time else -1,
                        "influx_healthy": 1 if self.influx_healthy else 0,
                        "mqtt_connected": 1 if self.mqtt_connected else 0
                    }
                    
                    write_influx(
                        self.influx_client,
                        "health",
                        health_data,
                        {"status": "issues" if issues else "healthy"}
                    )
                except Exception as e:
                    logger.error(f"L·ªói ghi health data: {e}")
        else:
            logger.info("üè• Health Check: All systems healthy")
        
        return len(issues) == 0

    def _midnight_job(self):
        try:
            self._reset_daily_energy()
            now = datetime.now(TIMEZONE_GMT7)
            if now.day == MONTH_START_DAY:
                self._reset_monthly_energy()
        except Exception as e:
            logger.error(f"L·ªói midnight job: {e}")
    
    def _reset_monthly_energy(self):
        """Reset energy baseline ƒë·∫ßu th√°ng"""
        try:
            if self.last_energy_reading is not None:
                # C·∫≠p nh·∫≠t baseline cho th√°ng m·ªõi
                self.monthly_start_energy = self.last_energy_reading
                logger.info(f"Reset monthly energy baseline: {self.monthly_start_energy} kWh")
        except Exception as e:
            logger.error(f"L·ªói reset monthly energy: {e}")
    
    def _reset_daily_energy(self):
        """Reset energy baseline ƒë·∫ßu ng√†y"""
        try:
            if self.last_energy_reading is not None:
                # C·∫≠p nh·∫≠t baseline cho ng√†y m·ªõi
                self.daily_start_energy = self.last_energy_reading
                logger.info(f"Reset daily energy baseline: {self.daily_start_energy} kWh")
        except Exception as e:
            logger.error(f"L·ªói reset daily energy: {e}")
    
    def process_mqtt_message(self, client, userdata, message):
        """X·ª≠ l√Ω tin nh·∫Øn MQTT t·ª´ ESP8266"""
        try:
            topic = message.topic
            payload = message.payload.decode('utf-8')
            logger.info(f"Nh·∫≠n d·ªØ li·ªáu t·ª´ {topic}: {payload}")
            
            # Parse JSON data t·ª´ ESP8266
            data = json.loads(payload)
            
            # Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu t·ª´ PZEM004T
            if all(key in data for key in ['voltage', 'current', 'power', 'energy', 'frequency', 'pf']):
                self._process_pzem_data(data)
            else:
                logger.warning(f"D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß: {data}")
                
        except json.JSONDecodeError as e:
            logger.error(f"L·ªói parse JSON: {e}")
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω MQTT message: {e}")
    
    def _process_pzem_data(self, data: Dict):
        """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ PZEM004T"""
        try:
            # L·∫•y timestamp hi·ªán t·∫°i theo GMT+7
            timestamp = datetime.now(TIMEZONE_GMT7)
            
            # Extract d·ªØ li·ªáu c∆° b·∫£n
            voltage = float(data.get('voltage', 0))
            current = float(data.get('current', 0))
            power = float(data.get('power', 0))
            energy = float(data.get('energy', 0))
            frequency = float(data.get('frequency', 0))
            pf = float(data.get('pf', 0))
            
            # Validation d·ªØ li·ªáu
            if not self._validate_sensor_data(voltage, current, power, energy, frequency, pf):
                logger.warning("D·ªØ li·ªáu sensor kh√¥ng h·ª£p l·ªá, b·ªè qua message n√†y")
                return
            
            # Ph√°t hi·ªán PZEM reset tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            self._detect_pzem_reset(energy)
            
            # C·∫≠p nh·∫≠t energy reading v√† health status
            self.last_energy_reading = energy
            self.last_data_time = timestamp
            
            # T√≠nh to√°n ƒëi·ªán ti√™u th·ª•
            daily_consumption = max(0, energy - self.daily_start_energy) if self.daily_start_energy is not None else 0
            monthly_consumption = max(0, energy - self.monthly_start_energy) if self.monthly_start_energy is not None else 0
            
            # T√≠nh gi√° ti·ªÅn theo b·∫≠c thang t√≠ch l≈©y trong th√°ng
            # - Gi√° ƒëi·ªán h√†ng ng√†y ƒë∆∞·ª£c t√≠nh t·ª´ t·ªïng ti√™u th·ª• t√≠ch l≈©y t·ª´ ƒë·∫ßu th√°ng
            # - Gi√° ƒëi·ªán th√°ng l√† t·ªïng gi√° c·ªßa to√†n b·ªô ƒëi·ªán ti√™u th·ª• trong th√°ng
            monthly_cost = calc_electricity_cost(monthly_consumption)
            # T√≠nh gi√° ƒëi·ªán h√¥m qua (t√≠ch l≈©y t·ª´ ƒë·∫ßu th√°ng ƒë·∫øn h·∫øt ng√†y h√¥m qua)
            yesterday_consumption = max(0, monthly_consumption - daily_consumption)
            yesterday_cost = calc_electricity_cost(yesterday_consumption)
            # Gi√° ƒëi·ªán h√¥m nay = T·ªïng gi√° t√≠ch l≈©y - T·ªïng gi√° ƒë·∫øn h·∫øt h√¥m qua
            daily_cost_value = monthly_cost['total'] - yesterday_cost['total']
            daily_cost = {
                'total': daily_cost_value,
                'kWh': daily_consumption,
                'subtotal': (monthly_cost['subtotal'] - yesterday_cost['subtotal']),
                'vat': (monthly_cost['vat'] - yesterday_cost['vat'])
            }
            
            # Ghi measurement 'data': d·ªØ li·ªáu realtime ƒë·∫ßy ƒë·ªß cho Grafana
            write_influx(
                self.influx_client,
                "data",
                {
                    # Th√¥ng s·ªë realtime t·ª´ PZEM
                    "voltage": voltage,
                    "current": current,
                    "power": power,
                    "energy": energy,
                    "frequency": frequency,
                    "power_factor": pf,
                    # ƒêi·ªán ti√™u th·ª• hi·ªán t·∫°i
                    "daily_kwh": daily_consumption,
                    "monthly_kwh": monthly_consumption,
                    # Ti·ªÅn ƒëi·ªán hi·ªán t·∫°i
                    "daily_cost": daily_cost['total'],
                    "monthly_cost": monthly_cost['total']
                },
                {}
            )
            
            # Ch·ªâ ghi d·ªØ li·ªáu realtime, kh√¥ng ghi snapshot
            
            logger.info(f"ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu: Power={power}W, Energy={energy}kWh, Daily={daily_consumption:.3f}kWh, Monthly={monthly_consumption:.3f}kWh")
            
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu PZEM: {e}")
    
    
    def get_consumption_summary(self) -> Dict:
        """L·∫•y t·ªïng quan ƒëi·ªán ti√™u th·ª•"""
        try:
            # T√≠nh to√°n hi·ªán t·∫°i
            daily_consumption = max(0, self.last_energy_reading - self.daily_start_energy) if self.daily_start_energy is not None else 0
            monthly_consumption = max(0, self.last_energy_reading - self.monthly_start_energy) if self.monthly_start_energy is not None else 0
            
            # T√≠nh gi√° ti·ªÅn theo b·∫≠c thang t√≠ch l≈©y trong th√°ng
            monthly_cost = calc_electricity_cost(monthly_consumption)
            # T√≠nh gi√° ƒëi·ªán h√¥m qua (t√≠ch l≈©y t·ª´ ƒë·∫ßu th√°ng ƒë·∫øn h·∫øt ng√†y h√¥m qua)
            yesterday_consumption = max(0, monthly_consumption - daily_consumption)
            yesterday_cost = calc_electricity_cost(yesterday_consumption)
            # Gi√° ƒëi·ªán h√¥m nay = T·ªïng gi√° t√≠ch l≈©y - T·ªïng gi√° ƒë·∫øn h·∫øt h√¥m qua
            daily_cost_value = monthly_cost['total'] - yesterday_cost['total']
            daily_cost = {
                'total': daily_cost_value,
                'kWh': daily_consumption,
                'subtotal': (monthly_cost['subtotal'] - yesterday_cost['subtotal']),
                'vat': (monthly_cost['vat'] - yesterday_cost['vat'])
            }
            
            return {
                "timestamp": datetime.now(TIMEZONE_GMT7).isoformat(),
                "daily": {
                    "kwh": daily_consumption,
                    "cost": daily_cost['total']
                },
                "monthly_current": {
                    "kwh": monthly_consumption,
                    "cost": monthly_cost['total']
                }
            }
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y consumption summary: {e}")
            return {}
    
    def run(self):
        """Ch·∫°y processor ch√≠nh"""
        try:
            # Kh·ªüi t·∫°o MQTT client
            mqtt_client = init_mqtt(self.process_mqtt_message)
            logger.info("ƒê√£ k·∫øt n·ªëi MQTT th√†nh c√¥ng")
            
            # Ch·∫°y MQTT loop trong background
            mqtt_client.loop_start()
            
            logger.info("ElectricityProcessor ƒëang ch·∫°y...")
            
            # Main loop
            while True:
                # Ch·∫°y scheduled tasks
                schedule.run_pending()
                
                # Log tr·∫°ng th√°i v√† health check m·ªói 5 ph√∫t
                if int(time.time()) % 300 == 0:
                    summary = self.get_consumption_summary()
                    if summary:
                        logger.info(f"Tr·∫°ng th√°i: Daily={summary['daily']['kwh']:.3f}kWh, Monthly={summary['monthly_current']['kwh']:.3f}kWh")
                    
                    # Health check
                    self._health_check()
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("ƒêang d·ª´ng ElectricityProcessor...")
            mqtt_client.loop_stop()
            mqtt_client.disconnect()
        except Exception as e:
            logger.error(f"L·ªói trong main loop: {e}")
            raise

if __name__ == "__main__":
    processor = ElectricityProcessor()
    processor.run()
